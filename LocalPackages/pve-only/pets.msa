# Show the name of the player who owns the pet you are looking at.
# (Pedantically: near the block you are looking at.)

*:'/petowner' [$] = >>>
	@range = 2
	@message = color(gold).'Pets within '.@range.' blocks of that block are owned by:'
	@pets = entities_in_radius(pcursor(), @range, array(OCELOT,WOLF))
	foreach (@pets, @pet,
		if (is_tameable(@pet)) {
			@results = @results.' '.get_mob_owner(@pet).' ('.to_lower(entity_type(@pet)).')'
		}
	)
	console('petowner: at '.ploc().' '.player().' queried pets at '.pcursor().' result:'.@results, false)
	msg(@message.@results)
<<<


# Spawn a cat or dog tamed to the specified player where you are standing.
# Supported types are cat, dog, ocelot and wolf, case-insensitive.

*:'/spawn-tame-mob' $type $player = >>>
	_assertperm('restricted')
	if (equals_ic($type,'DOG'), @mob = 'WOLF', @mob = $type)
	if (equals_ic(@mob,'CAT'),  @mob = 'OCELOT')
	if (!equals_ic(@mob,'OCELOT') && !equals_ic(@mob,'WOLF')) {
		die(color(red).'We can\'t spawn a '.@mob.'!')
	}

	# Prevent the mob from spawning *inside* the block at the player's feet. ;_;
	@loc = ploc()
	@loc[1] = @loc[1] + 1

	# Randomly select a cat type.
	if (equals_ic(@mob,'OCELOT')) {
		@mob = @mob.':'.array(BLACK_CAT, RED_CAT, SIAMESE_CAT)[rand(3)]
	}

	tame_mob($player, spawn_mob(@mob, 1, @loc)[0])
	msg(color(gold).'Spawned '.to_lower(@mob).' owned by '.$player.'.')
<<<
